ReactJS 

naveenks.com 

Vivek - already worked with Angular, new to react, + looking for Testing.
Saad - worked with JS + React 
Akshay - worked on AngularJS / Anuglar - new to react 
Ankit - 
Sivan - JS, Angular, KnockOut, new React
Girish - worked on Angular / JS, how react will work with Redux, and use cases 
Ankita Singh - have worked with angular, JS, node, work with react with best practices 
				invoke Rest points, Routes 
Arun - worked in Angular, new to react 
Chintan - Worked on AngularJS and new to react.
Deepthi krishna - JS, Angular , new to react 
Harsh - worked on JS, jQuery,  new to react 
Manoj -  new to react, have got idea on angular 
Akhil - have knowledge of react, 
Nabeel - worked on angular js / angular, to know work flow of react 
Ravi -  worked on angular js new to react 
Jeevan - 
Ananth - 
Arun - 
Ankit = Worked on JS and basic of AngularJS. New to React
Naga Sai akhil - I  have a little knowledge on react, need to know how the react will work with redux and main use cases, MVC project with react, mainly routing and component life cycle



ES6 - 

NodeJS - https://nodejs.org/en/download/
VS Code - https://code.visualstudio.com/download


// 3 ways of exporting 
1. export mywork; 
2. export default mywork; - only 1 function 
3. export = {mywork, mywork1, mywork2}; 


// 3 ways of importing 
1. import {mywork} from './mywork'; 
2. import mywork from 'mywork' 
3. import * as mywork from './mywork'; 
   import mywork from './mywork'; 



const map1 = array1.map(x => x * 2);

map(arg) {return decorated(arg)}




http://es6-features.org/#Constants
https://es6.io
https://kangax.github.io/compat-table/es6/



.js / .jsx 

react - redux 

test 
	.js
reducers 
	.js
action
	.js
component
	.js 
.html



if you want to load in different browser 


package.json 
"scripts": {
  "start": "BROWSER=firefox react-scripts start"
},

> npm/npx create-react-app app-name
> npm start 


when ever state is mutated the render is called... 
 








class Hi extends Component {
 render (  
		<div>
		 	<h2>hi</h2> 
			<h3>bye</h3>
		</div>
 )
}

class Bye extends Component {
 render (  
		<div>
		 	<h2>hi</h2> 
			<h3>bye</h3>
		</div>
 )
}


React Life Cycle 
https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/

Data 
https://www.mockaroo.com/

Images 
https://randomuser.me/api/portraits/men/6.jpg



1. Life cycle in React Component 
2. How to call a component from another component 
3. Contact card / Contant List calling 1 card from the array 



Ajax call from the end point 
1. copy the data from db/data.json 
2. install json server 
	npm i json-server 
3. open package.json 
	script {
		..... , 
		"rest-server": "json-server --port=4000 --watch db/data.json"
	}
4. npm run rest-server

 


export default loading('contacts')(ContactListHOC);  
export default loading('products')(ProductListHOC);  
export default loading('employees')(EmployeeListHOC);  


cost fun1 = (par1) => (par2) => ret_val; 

fun('firstParam')('secondParam')




















const loading = (OldComponent) =>  {
	return (props) => {
  	  	let output =  <OldComponent {...props} /> 
 	   	if(isEmpty(property)) {
        	output =<p className="text-center">Loading... Please wait... </p>
		}
		return output; 
	}
}
export default loading; 


<ContactList contacts={contacts} />
loading('contacts')(OldComponent)

<ProductList products={product} />
loading('products')(OldComponent)



<ContactList contacts={contacts} />
<ProductList products={product} />
??????? 
  
'contacts' / 'prducts'
const loading = (property) => (OldComponent) => (props) => {
            let output =  <OldComponent {...props} /> 
 
         
            if(isEmpty(props[property])) {
                output =<p className="text-center">Loading... Please wait... </p>
            }
            return output; 
}
export default loading; 





function hello (a, b, c) {
	
}

function hello (a, b) {
	return function(c) {
	
	}
}

res = hello(10, 20, <promise>); 

res = hello(10, 20) => (<promise>) => {
}



1. setting up rest server - making ajax call
2. HOC -> Carrier Functions (Partial Invocation)
3. Virtual DOM 




-------------------------------------------------


const ContactCardJson = ({ contact }) => (....); 


const ContactListJSON =({contacts}) => (
    <div>
        {contacts.map(c => <ContactCardJson contact={c} key={c.id} /> )}
    </div>
)



class AppJSON extends Component {
    state = { 
        contacts:[]
     }
}





const action ={type:"ADD_NAME", data = name}; 
const action = {type:"DELETE_NAME", data=index}; 


reducer = (state, action) => {
	// some business logic 
	
	action.data 
	action.type
	action.company 
}



data: "Harry"
type: "ADD_NAME"
company:"Viteos"


componentDidMount() {
 
 
 }

componentUnMount() {
}















